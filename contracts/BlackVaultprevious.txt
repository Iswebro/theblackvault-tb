// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title BlackVault
 * @dev Community-driven vault that accrues daily yield on USDT deposits and rewards referrers.
 */
interface IERC20 {
    function transferFrom(address from, address to, uint256 amount) external returns (bool);
    function transfer(address to, uint256 amount) external returns (bool);
    function balanceOf(address account) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
}

contract BlackVault {
    // ─── OWNERSHIP & PAUSING ─────────────────────────────────────────────────────
    address public owner;
    bool public paused;

    modifier onlyOwner() {
        require(msg.sender == owner, "Not owner");
        _;
    }
    modifier notPaused() {
        require(!paused, "Vault is paused");
        _;
    }

    // ─── TOKENS & CONSTANTS ──────────────────────────────────────────────────────
    IERC20 public immutable USDT;                                     // Added: USDT token
    uint256 public constant DAILY_RATE = 25;                          // Changed: 2.5% per day (25 / 1000)
    uint256 public constant MAX_WITHDRAWAL = 250 * 1e6;                // Changed: in USDT units (USDT has 6 decimals)
    uint256 public constant CYCLE_DURATION = 86400;                   
    uint256 public constant CYCLE_START_TIME = 1718619600;            
    uint256 public constant REFERRAL_REWARD_PERCENT = 10;             

    // ─── DATA STRUCTURES ────────────────────────────────────────────────────────
    struct Deposit {
        uint256 amount;         // total USDT deposited
        uint256 lastCycle;      // cycle index at last action
        uint256 rewards;        // accrued yield
    }
    struct Referral {
        uint256 rewards;        // accrued referral rewards
        uint256 activeCount;    // number of active referees
        uint256 totalVolume;    // total volume referred
        bool     banned;        // blacklist flag
    }

    mapping(address => Deposit) public vault;
    mapping(address => uint256) public totalWithdrawn;            // by user
    mapping(address => Referral) public referrals;

    // ─── EVENTS ─────────────────────────────────────────────────────────────────
    event Deposited(address indexed user, uint256 amount, address indexed referrer);
    event Withdrawn(address indexed user, uint256 amount);
    event ReferralWithdrawn(address indexed user, uint256 amount);
    event Paused(bool state);
    event ReferralBanned(address indexed user);                  // Added

    // ─── CONSTRUCTOR ───────────────────────────────────────────────────────────
    constructor(address usdtAddress) {
        owner = msg.sender;
        USDT = IERC20(usdtAddress);                             // Added
    }

    // ─── PAUSING ────────────────────────────────────────────────────────────────
    function togglePause() external onlyOwner {
        paused = !paused;
        emit Paused(paused);
    }

    // ─── DEPOSIT (USDT) ─────────────────────────────────────────────────────────
    function deposit(uint256 amount, address referrer) external notPaused {
        require(amount >= 50 * 1e6, "Min deposit 50 USDT");       // Added minimum deposit
        require(USDT.allowance(msg.sender, address(this)) >= amount, "Insufficient allowance");
        require(USDT.transferFrom(msg.sender, address(this), amount), "USDT transfer failed");

        Deposit storage dep = vault[msg.sender];
        dep.amount += amount;
        // set lastCycle to currentCycle to avoid instant yield
        dep.lastCycle = (block.timestamp - CYCLE_START_TIME) / CYCLE_DURATION;

        // REFERRAL BONUS
        if (
            referrer != address(0) &&
            referrer != msg.sender &&
            vault[referrer].amount > 0 &&
            !referrals[referrer].banned
        ) {
            uint256 bonus = (amount * REFERRAL_REWARD_PERCENT) / 100;
            referrals[referrer].rewards += bonus;
            referrals[referrer].totalVolume += amount;
            referrals[referrer].activeCount += 1;                // Count every valid deposit as an active referee
        }

        emit Deposited(msg.sender, amount, referrer);
    }

    // ─── YIELD ACCRUAL ───────────────────────────────────────────────────────────
    function _updateRewards(address user) internal {
        Deposit storage dep = vault[user];
        if (dep.amount == 0) return;
        uint256 currentCycle = (block.timestamp - CYCLE_START_TIME) / CYCLE_DURATION;
        if (dep.lastCycle == 0) {
            dep.lastCycle = currentCycle;
            return;
        }
        if (currentCycle > dep.lastCycle) {
            uint256 cycles = currentCycle - dep.lastCycle;
            uint256 newRewards = (dep.amount * DAILY_RATE / 1000) * cycles;
            dep.rewards += newRewards;
            dep.lastCycle = currentCycle;
        }
    }

    // ─── WITHDRAW YIELD ─────────────────────────────────────────────────────────
    function withdraw() external notPaused {
        _updateRewards(msg.sender);
        uint256 reward = vault[msg.sender].rewards;
        require(reward > 0, "No rewards");
        uint256 toWithdraw = reward > MAX_WITHDRAWAL ? MAX_WITHDRAWAL : reward;
        vault[msg.sender].rewards -= toWithdraw;
        totalWithdrawn[msg.sender] += toWithdraw;
        require(USDT.transfer(msg.sender, toWithdraw), "USDT transfer failed");
        emit Withdrawn(msg.sender, toWithdraw);
    }

    // ─── WITHDRAW REFERRAL ───────────────────────────────────────────────────────
    function withdrawReferralEarnings() external notPaused {
        Referral storage ref = referrals[msg.sender];
        require(!ref.banned, "Referral banned");
        uint256 amount = ref.rewards;
        require(amount > 0, "No referral rewards");
        ref.rewards = 0;
        require(USDT.transfer(msg.sender, amount), "USDT transfer failed");
        emit ReferralWithdrawn(msg.sender, amount);
    }

    // ─── ADMIN: BAN REFERRER ─────────────────────────────────────────────────────
    function banReferral(address user) external onlyOwner {
        referrals[user].banned = true;
        emit ReferralBanned(user);
    }

    // ─── STATS QUERIES ───────────────────────────────────────────────────────────
    function vaultInfo(address user) external view returns (uint256, uint256, uint256) {
        Deposit storage d = vault[user];
        return (d.amount, d.lastCycle, d.rewards);
    }
    function referralStats(address user) external view returns (uint256 rewards, uint256 activeCount, uint256 totalVolume, bool banned) {
        Referral storage r = referrals[user];
        return (r.rewards, r.activeCount, r.totalVolume, r.banned);
    }

    // ─── FUND CONTRACT (OWNER TOP-UP) ────────────────────────────────────────────
    function fundContract(uint256 amount) external onlyOwner {
        require(amount > 0, "Amount must be > 0");
        require(USDT.allowance(msg.sender, address(this)) >= amount, "Insufficient allowance");
        require(USDT.transferFrom(msg.sender, address(this), amount), "USDT transfer failed");
    }

    // ─── EMERGENCY WITHDRAW REMOVED ──────────────────────────────────────────────
    // * The emergencyWithdraw() was removed to enhance trust: only yield and referrals can be withdrawn.

    // ─── FALLBACK REMOVED ────────────────────────────────────────────────────────
    // * The plain receive() fallback has been removed since deposits are explicit USDT transfers.
}
